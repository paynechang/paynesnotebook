//==============================================================================
// CO.hoc
// Closed state <-> Open state (rates: a1, b1)

//==============================================================================
// Parameter Initiation

// Forward rate
// Rate(x) = a / (1 + exp((x - x0) / k))
a1a = 1
a1x0 = -80
a1k = 10

// Backward rate
b1a = 1
b1x0 = -40
b1k = -10

// Experimental v0(x0) and k
x0 = -80.5
k = 6.7

//==============================================================================
// Vectors
objref vecX, vecA1, vecB1, vecG, vecTau
vecX = new Vector()	// x coordinate
vecA1 = new Vector()	// a of a1
vecB1 = new Vector()	// a of b1
vecG = new Vector()	// 
vecTau = new Vector()

objref vecExpGCurve, vecExpTauX, vecExpTau, vecExpGPoints
vecExpGCurve = new Vector()
vecExpGPoints = new Vector()
vecExpTauX = new Vector()
vecExpTau = new Vector()

//==============================================================================
// Window for the kinetic scheme
// hBox comprises vBox1 and vBox2
objref hBox, vBox1, vBox2
hBox = new HBox()
vBox1 = new VBox()
vBox2 = new VBox()

// Declare graphs
objref graphGV, graphTau, graphRates

// Start of the hBox
hBox.intercept(1)
{
	//=============================================================
	// The first column
	vBox1.intercept(1)
	{
		// Display function
		xpanel("function", 0)	// 0: Vertical
		{
			xlabel("Two States:")
			xlabel("C <-> O (Rates: a1, b1)")
		}
		xpanel()
		
		//=====================
		// a1
		
		// Panel a1
		xpanel("a1")
		{
			xlabel("a1")
		}
		xpanel()
		
		// a
		xpanel("a1a", 1)
		{
			xvalue("a", "a1a")
			xslider(&a1a, 0, 1, "PlotSchemeCurves()")
		}
		xpanel()
		
		// Panel a1x0
		xpanel("a1x0", 1)
		{
			xvalue("x0", "a1x0")
			xslider(&a1x0, -150, 50, "PlotSchemeCurves()")
		}
		xpanel()

		// Panel a1k
		xpanel("a1k", 1)
		{
			xvalue("k", "a1k")
			xslider(&a1k, -50, 50, "PlotSchemeCurves()")
		}
		xpanel()

		//=====================
		// b1
		
		// Panel b1
		xpanel("b1")
		{
			xlabel("b1")
		}
		xpanel()
		
		// b1a
		xpanel("b1a", 1)
		{
			xvalue("b", "b1a")
			xslider(&b1a, 0, 1, "PlotSchemeCurves()")
		}
		xpanel()
		
		// Panel b1x0
		xpanel("b1x0", 1)
		{
			xvalue("x0", "b1x0")
			xslider(&b1x0, -150, 50, "PlotSchemeCurves()")
		}
		xpanel()

		// Panel b1k
		xpanel("b1k", 1)
		{
			xvalue("k", "b1k")
			xslider(&b1k, -50, 50, "PlotSchemeCurves()")
		}
		xpanel()
		
		// Other parameters
		xpanel("Parameters")
		{
			xlabel("Parameters for Boltzmann's equation")
			xvalue("x0", "x0")
			xvalue("k", "k")
			xbutton("Load exp. Tau data", "LoadExpGVData()")
			xbutton("Find The Best Fit", "FindBestFit()")
		}
		xpanel()
	}
	vBox1.intercept(0)
	vBox1.map("Controls", 0, 0, 300, 300)

	//=============================================================
	// The second column
	vBox2.intercept(1)
	{
		//=====================
		// GV
		graphGV = new Graph(0)
		graphGV.view(-150, 0, 200, 1, 0, 0, 400, 200)
		graphGV.yaxis( 0, 1, -150, 5, 1, 0, 1)
		graphGV.label(0.05, 0.95, "GV Curve")
		
		//=====================
		// Tau
		graphTau = new Graph(0)
		graphTau.view(-150, 0, 200, 50, 0, 0, 400, 200)
		graphTau.label(0.05, 0.95, "Tau Curve")
		
		//=====================
		// Rates
		graphRates = new Graph(0)
		graphRates.view(-150, 0, 200, 5, 0, 0, 400, 200)
		graphRates.label(0.05, 0.7, "Rates Curve")
		graphRates.color(2)
		graphRates.label("Activation")
		graphRates.color(3)
		graphRates.label("Inactivation")
	}
	vBox2.intercept(0)
	vBox2.map()
}
// End of hBox
hBox.intercept(0)

//==============================================================================
// Plot all curves
// Declare variables, which will be used later.
a1 = 1
b1 = 1
x = 0

vecX.resize(201)	// x coordinate ( = v)

vecExpGCurve.resize(201)	// Experimental G (conductance)
vecG.resize(201)			// Calculated G

vecTau.resize(201)			// Calculate Tau (time constant)

vecA1.resize(201)			// Forward rate
vecB1.resize(201)			// Backward rate

// Procedure to plot curves
proc PlotSchemeCurves(){
	
	// Set values
	for(i = 0; i <= 200; i += 1){	// -150 ~ 50
		x = i - 150	// x ( = v )
		vecX.x[i] = x
		vecA1.x[i] = (a1 = a1a * Boltzmann(x, a1x0, a1k))	// Forward
		vecB1.x[i] = (b1 = b1a * Boltzmann(x, b1x0, b1k))	// Backward
		vecExpGCurve.x[i] = Boltzmann(x, x0, k)	// Exp. GV curve
		vecG.x[i] = (a1 / (a1 + b1))	// Calculated G
		vecTau.x[i] = (1 / (a1 + b1))	// Calculate Tau
	}
	
	// Plots
	// GV curves
	vecG.plot(graphGV, vecX, 4, 2)
	vecExpGCurve.plot(graphGV, vecX, 1, 1)
	vecExpGPoints.mark(graphGV, vecExpTauX, "s", 9, 6, 1)
	
	// Tau-V curves
	vecTau.plot(graphTau, vecX, 5, 2)
	vecExpTau.mark(graphTau, vecExpTauX, "s", 9, 6, 1)
	vecExpTau.line(graphTau, vecExpTauX)
	
	// Rate-V curves
	vecA1.plot(graphRates, vecX, 2, 1)
	vecB1.plot(graphRates, vecX, 3, 1)
	
	// Resize
	graphTau.exec_menu("View = plot")
	graphRates.exec_menu("View = plot")
}

//==============================================================================
// Load experimental Tau-V data
proc LoadExpGVData(){

	// Select file
	ioFile.chooser("", "Select exp. tau data", "*.dat", "OK")
	
	// The file has been successfully picked up
	if(ioFile.chooser()){
	
		// Get file name
		ioFile.getname(ioFileName)
		
		// Open file for input
		ioFile.ropen(ioFileName)
		
		// Number of data pairs
		count = ioFile.scanvar()
		
		// Resize vectors
		vecExpTauX.resize(count)
		vecExpTau.resize(count)
		vecExpGPoints.resize(count)
		
		// Read each data
		for(i=0; i<count; i+=1){
			// x ( = v)
			vecExpTauX.x[i] = ioFile.scanvar()
			
			// tau
			vecExpTau.x[i] = ioFile.scanvar()
			
			// Calculate theoretical value at this x
			vecExpGPoints.x[i] = Boltzmann(vecExpTauX.x[i], x0, k)
		}
	}
	
	// Plot all curves
	PlotSchemeCurves()
}

//==============================================================================
// Find the best fit
double fitVar[6]

// Error function
func FittingError() {local a1a, a1x0, a1k, b1a, b1x0, b1k, error, alpha, beta
	a1a = $&2[0]
	a1x0 = $&2[1]
	a1k = $&2[2]
	b1a = $&2[3]
	b1x0 = $&2[4]
	b1k = $&2[5]
	
	error = 0

	for(i=0; i<vecExpTauX.size(); i += 1){
		alpha = a1a * Boltzmann(vecExpTauX.x[i], a1x0, a1k)
		beta = b1a * Boltzmann(vecExpTauX.x[i], b1x0, b1k)
		error += (vecExpGPoints.x[i] - alpha / (alpha + beta))^2 + \
			((vecExpTau.x[i] - 1 / (alpha + beta)) / vecExpTau.max())^2
	}
	
	return error
}

// Fitting procedure
proc FindBestFit(){

	// Set fitting parameters
	fitVar[0] = a1a
	fitVar[1] = a1x0
	fitVar[2] = a1k
	fitVar[3] = b1a
	fitVar[4] = b1x0
	fitVar[5] = b1k
	
	// Set fitting environment
	attr_praxis(1e-5, 1, 1)
	
	// Find the best fit
	error = fit_praxis(6, "FittingError", &fitVar[0])
	
	// Assign new values to parameters
	a1a = fitVar[0]
	a1x0 = fitVar[1]
	a1k = fitVar[2]
	b1a = fitVar[3]
	b1x0 = fitVar[4]
	b1k = fitVar[5]
	
	// Plot new curves
	PlotSchemeCurves()
}
