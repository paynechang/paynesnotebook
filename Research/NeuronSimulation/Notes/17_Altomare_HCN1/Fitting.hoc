//==============================================================================
// Fitting.hoc

//==============================================================================
// Graph for fitting
objref graphFitting
graphFitting = new Graph(0)
graphFitting.view(0, 0, 10, 10, 1350, 500, 300, 200)

//==============================================================================
// Vectors and variables
objref vecFittingDataX, vecFittingDataY, vecFittingResultX, vecFittingResultY
vecFittingDataX = new Vector()
vecFittingDataY = new Vector()
vecFittingResultX = new Vector()
vecFittingResultY = new Vector()

double fitVar[7]	// Store variables for fitting.

//==============================================================================
// Exponential decay
// f(x) = amp * exp((x - x0) / tau)

// Error Function
func ErrorExponentialDecay() {local amp, x0, y0, tau, error
	y0 = $&2[0]
	amp = $&2[1]
	x0 = $&2[2]
	tau = $&2[3]
	
	error = 0

	for(i = 0; i < vecFittingDataX.size(); i += 1) {
		error += (vecFittingDataY.x[i] - \
			(y0 + amp * exp( -(vecFittingDataX.x[i]	- x0) / tau)))^2
	}
	
	return error
}

// Procedure
proc FitExponentialDecay(){local error, y0, amp, x0, tau

	// X and Y coordinates
	vecFittingDataX = $o1
	vecFittingDataY = $o2
	
	// Set fitting parameters
	fitVar[0] = $&3
	fitVar[1] = $&4
	fitVar[2] = $&5
	fitVar[3] = $&6
	
	attr_praxis(1e-5, 1, 0)
	error = fit_praxis(4, "ErrorExponentialDecay", &fitVar[0])
	
	$&3 = fitVar[0]
	$&4 = fitVar[1]
	$&5 = fitVar[2]
	$&6 = fitVar[3]
	
	y0 = fitVar[0]
	amp = fitVar[1]
	x0 = fitVar[2]
	tau = fitVar[3]

	vecFittingResultX.resize(0)
	vecFittingResultY.resize(0)
	
	for(i = 0; i < vecFittingDataX.size(); i += 1) {
		x = vecFittingDataX.x[i]
		vecFittingResultX.append(x)
		vecFittingResultY.append( y0 + amp * exp( -(x - x0) / tau))
	}
}

//==============================================================================
// Line
// y = y0 + slope * (x - x0)

// Error Function
func ErrorLine() {local x, y, y0, slope, x0
	y0 = $&2[0]
	slope = $&2[1]
	x0 = $&2[2]
	
	error = 0

	for(i = 0; i < vecFittingDataX.size(); i += 1) {
		x = vecFittingDataX.x[i]
		y = vecFittingDataY.x[i]
		error += (y - (y0 + slope * (x - x0)))^2
	}
	
	return error
}

// Procedure
proc FitLine(){local error

	// X and Y coordinates
	vecFittingDataX = $o1
	vecFittingDataY = $o2
	
	// Set fitting parameters
	fitVar[0] = $&3
	fitVar[1] = $&4
	fitVar[2] = $&5
	
	attr_praxis(1e-5, 1, 0)
	error = fit_praxis(3, "ErrorLine", &fitVar[0])
	
	$&3 = fitVar[0]
	$&4 = fitVar[1]
	$&5 = fitVar[2]
	
	// Fit result
	vecFittingResultY.resize(0)
	
	for(i = 0; i < vecFittingDataX.size(); i += 1) {
		x = vecFittingDataX.x[i]
		vecFittingResultY.append(fitVar[0] + fitVar[1] * (x - fitVar[2]))
	}
	
	// Print result
	printf("Y0 = %g; Slope = %g; X0 = %g; Error = %g\n", fitVar[0], fitVar[1], \
		fitVar[2], error)
}

//================================================================================
// Six Order Polynomial
// y = a0 + a1 * x + a2 * x^2 + a3 * x^3 + a4 * x^4 + a5 * x^5 + a6 * x^6

// Error Function
func ErrorSixOrderPolynomial() {local x, y, a0, a1, a2, a3, a4, a5, a6
	a0 = $&2[0]
	a1 = $&2[1]
	a2 = $&2[2]
	a3 = $&2[3]
	a4 = $&2[4]
	a5 = $&2[5]
	a6 = $&2[6]
	
	error = 0

	for(i = 0; i < vecFittingDataX.size(); i += 1) {
		x = vecFittingDataX.x[i]
		y = vecFittingDataY.x[i]
		error += (y - (a0 + a1 * x + a2 * x^2 + a3 * x^3 + a4 * x^4 + a5 * x^5 \
			+ a6 * x^6))^2
	}
	
	return error
}

// Procedure
proc FitSixOrderPolynomial(){local error, startPt, a0, a1, a2, a3, a4, a5, a6

	// X and Y coordinates
	vecFittingDataX = $o1
	vecFittingDataY = $o2
	
	// Set fitting parameters
	fitVar[0] = 1
	fitVar[1] = 1
	fitVar[2] = 1
	fitVar[3] = 1
	fitVar[4] = 1
	fitVar[5] = 1
	fitVar[6] = 1
	
	attr_praxis(1e-5, 1, 0)
	error = fit_praxis(7, "ErrorSixOrderPolynomial", &fitVar[0])
	
	a0 = fitVar[0]
	a1 = fitVar[1]
	a2 = fitVar[2]
	a3 = fitVar[3]
	a4 = fitVar[4]
	a5 = fitVar[5]
	a6 = fitVar[6]
	
	// Fit result
	vecFittingResultX.resize(0)
	vecFittingResultY.resize(0)
	
	startPt = (int(vecFittingDataX.x[0] * 10) - 1)*0.1
	
	for(x = startPt; x <= 10; x += 0.1){
		vecFittingResultX.append(x)
		vecFittingResultY.append(a0 + a1*x + a2*x^2 + a3*x^3 + a4*x^4 + a5*x^5 + a6*x^6)
	}
}

//================================================================================
// Boltzmann equation
// y = 1/(1 + exp((x - x0) / k))

// Error Function
func ErrorBoltzmannEquation() {local x, y, x0, k
	x0 = $&2[0]
	k = $&2[1]
	
	error = 0

	for(i = 0; i < vecFittingDataX.size(); i += 1) {
		x = vecFittingDataX.x[i]
		y = vecFittingDataY.x[i]
		error += (y - (1 / (1 + exp((x - x0) / k))))^2
	}
	
	return error
}

// Procedure
proc FitBoltzmannEquation(){local error, x0, k

	// X and Y coordinates
	vecFittingDataX = $o1
	vecFittingDataY = $o2
	
	// Set fitting parameters
	fitVar[0] = -100
	fitVar[1] = 10
	
	attr_praxis(1e-5, 1, 0)
	error = fit_praxis(2, "ErrorBoltzmannEquation", &fitVar[0])
	
	x0 = fitVar[0]
	k = fitVar[1]
	
	// Fit result
	vecFittingResultX.resize(0)
	vecFittingResultY.resize(0)
	
	for(x = -150; x <= 0; x += 1){
		vecFittingResultX.append(x)
		vecFittingResultY.append(1 / (1 + exp((x - x0) / k)))
	}
	
	printf("vhalf = %g (mV); k = %g (mV)\n", x0, k)
}

//================================================================================
