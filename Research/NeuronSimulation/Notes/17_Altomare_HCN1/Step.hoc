//==============================================================================
// File Name: Step.hoc
// Step experiments

//==============================================================================
// Control box
objref hBoxStep
hBoxStep = new HBox()

// Start of the control box
hBoxStep.intercept(1)
{
	//======================================
	// Add the run control panel
	load_file(1, "RunControl.hoc")
	
	//======================================
	// Control panel 
	xpanel("", 0)	// Start the panel("Title", 0: vertical lay out)
	{
		// Calculate Rin button
		xbutton("Calculate Rin","CalculateRin()")

		xlabel("After simulation")
		
		// Measure Rin & Sag button
		xbutton("Measure Rin & Sag","MeasureRinSag()")

		xlabel("Step Family")
		
		// Run step family
		xbutton("Run Step Family","RunStepFamily()")
		
		xlabel("After running step family")
		// Measure Rin by linear regression
		
		xbutton("Measure Rin (LR)", "MeasureRinLR()")
		// Measure rebound slope by linear regression
		xbutton("Measure Rebound Slope (LR)", "MeasureReboundSlopeLR()")
	}
	// End of the panel
	xpanel() 

}
hBoxStep.intercept(0)// End of the box

//==============================================================================
// Calculate Rin
proc CalculateRin() {
	R = 1 / soma.g_pas						// Resistance [ohm.cm^2]
	SurfaceArea = soma.diam * PI * soma.L	// Surface Area [um^2]

	// Display Rin information
	print "=== Calculated Rin ==="
	print "Surface Area = ", SurfaceArea, " (um^2)"
	print "R = ", R, " (ohm cm^2)"
	print "Rin = ", R / (SurfaceArea * 1e-8) * 1e-6, " (Mega ohm)\n"
}

//==============================================================================
// Measure Rin and Sag
proc MeasureRinSag() {
	v1 = vecV.mean(50 / dt, 100 / dt-1)		// Baseline voltage (50~100 ms)
	v2 = vecV.min(100 / dt, 600 / dt-1)		// Minimun voltage (100~600 ms)
	v3 = vecV.mean(550 / dt, 600 / dt-1) // Voltage at steady state (550~600 ms)
	
	// Display Rin information
	print "=== Measured Rin & Sag ==="
	print "Rin = ", (v3 - v1) / iAmp, " (Mega Ohm)"
	print "Sag = ", 100 * ( 1 - (v1 - v3) / (v1 - v2)), " (%)\n"
}

//==============================================================================
// Run step family
objref vecVSS, vecIStep, vecVRebound
vecVSS = new Vector()	// Vector for steady-state voltage
vecIStep = new Vector()	// Vector for step current
vecVRebound = new Vector()	// Vector for rebound voltage
vBaseline = 0	// Baseline voltage
deltaI = 0.02	// Current step (nA)

proc RunStepFamily() {

	print "=== Run step family ==="	// Notification

	vecVSS.resize(0)		// Remove old data
	vecIStep.resize(0)		// Remove old data
	vecVRebound.resize(0)		// Remove old data
	
	graphV.family(1)	// Keep traces
	graphI.family(1)	// Keep traces
	
	//======================================
	// -0.1 to 0.1 nA
	for(i = -0.1; i <= 0.1; i += deltaI) {
		// Set step current
		electrodeIC.amp = i
		// Update panel display
		doNotify()
		// Run simulation
		run()
		
		// Store step current
		vecIStep.append(i)		
		// Calculate baseline voltage
		vBaseline = vecV.mean(50 / dt, 100 / dt - 1)
		// Measure steady-state voltage
		vecVSS.append(vecV.mean(550 / dt, 600 / dt - 1) - vBaseline)
		// Measure rebound voltage
		vecVRebound.append(vecV.max(600 / dt, vecV.size() - 1) - vBaseline)
	}
	
	//======================================
	// Save rebound vs. i to rebound_i.dat
	ioFile.wopen("CurrentStepFamily.dat")
	
	ioFile.printf("Current Vss Vrebound\n")
	
	count = 0
	for(i = -0.1; i <= 0.1; i += deltaI) {
		ioFile.printf("%g %g %g\n", i, vecVSS.x[count], vecVRebound.x[count])
		count += 1
	}
	
	ioFile.close()
	
	//======================================
	// Notification
	print "Data saved to \"CurrentStepFamily.dat\""
	print "Run step family - Done!\n"
}

//==============================================================================
// Measure Rin by linear regression
proc MeasureRinLR() { local y0, slope, x0
	print "=== Measured Rin (Linear Regression) ==="
	
	// vecFittingDataX, vecFittingDataY, vecFittingResultY are updated.
	FitLine(vecIStep, vecVSS, &y0, &slope, &x0)
	
	// Plot
	graphFitting.erase()
	vecFittingDataY.mark(graphFitting, vecFittingDataX, "+", 10, 3, 2)
	vecFittingResultY.line(graphFitting, vecFittingDataX, 2, 1)
	graphFitting.exec_menu("View = plot")
	graphFitting.exec_menu("10% Zoom out")
	
	// Print result
	printf("Rin = %g (M Ohm)\n\n", slope)
}

//==============================================================================
// Measure rebound slope by linear regression
objref vecXTmp, vecYTmp
vecXTmp = new Vector()
vecYTmp = new Vector()

proc MeasureReboundSlopeLR() { local y0, slope, x0
	print "=== Measured Rebound Slope (Linear Regression) ==="
	
	// Copy data with negative current injection
	index = vecIStep.indwhere(">=", 0)
	vecXTmp = vecVSS.c(0, index - 1)
	vecYTmp = vecVRebound.c(0, index - 1)
	
	// vecFittingDataX, vecFittingDataY, vecFittingResultY are updated.
	FitLine(vecXTmp, vecYTmp, &y0, &slope, &x0)
	
	// Plot
	graphFitting.erase()
	vecFittingDataY.mark(graphFitting, vecFittingDataX, "+", 10, 3, 2)
	vecFittingResultY.line(graphFitting, vecFittingDataX, 2, 1)
	graphFitting.exec_menu("View = plot")
	graphFitting.exec_menu("10% Zoom out")
	
	// Print result
	printf("Rebound Slope = %g (mV/mV)\n\n", slope)
}

//==============================================================================
