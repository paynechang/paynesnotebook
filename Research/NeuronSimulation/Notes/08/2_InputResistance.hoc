//======================================
// File Name: 2_InputResistance.hoc
// Assemble Input Resistance Box

//======================================
// Start of the box
inputResistanceBox.intercept(1)
{
	//======================================
	// Add the run control panel
	load_file(1, "RunControl.hoc")
	
	//======================================
	// Control panel 
	xpanel("", 0)	// Start the panel("Title", 0: vertical lay out)
	{
		xbutton("Calculate Rin","CalculateRin()")	// Calculate Rin button
		xlabel("After simulation")					// Display "After simulation"
		xbutton("Measure Rin & Sag","MeasureRinSag()")		// Measure Rin & Sag button
	}
	xpanel() // Close the panel

}
inputResistanceBox.intercept(0)// End of the box

//======================================
// Calculate Rin
proc CalculateRin() {
	R = 1/soma.g_pas					// Resistance [ohm.cm^2]
	SurfaceArea = soma.diam*PI*soma.L	// Surface Area [um^2]

	// Display Rin information
	print "\nCalculated Rin"
	print "Surface Area = ", SurfaceArea, " (um^2)"
	print "R = ", R, " (ohm cm^2)"
	print "Rin = ", R/(SurfaceArea*1e-8)*1e-6, " (Mega ohm)"
}

//======================================
// Measure Rin and Sag
proc MeasureRinSag() {
	index1 = tVector.indwhere(">=", 50)		// Get the index of the baseline
	index2 = tVector.indwhere(">=", 100)	// 50~100 ms
	v1 = vVector.mean(index1, index2-1)		// Voltage at baseline
	
	index1 = tVector.indwhere(">=", 100)		// Get the index of the baseline
	index2 = tVector.indwhere(">=", 600)	// 50~100 ms
	v2 = vVector.min(index1, index2-1)		// Voltage at baseline
	
	index1 = tVector.indwhere(">=", 550)	// Get the index of the response
	index2 = tVector.indwhere(">=", 600)	// 550~600 ms
	v3 = vVector.mean(index1, index2-1)		// Voltage at steady state
	
	// Display Rin information
	print "\nMeasure Rin & Sag"
	print "Rin = ", (v1-v3)/(0.1), " (Mega Ohm)"
	print "Sag = ", 100*(1-(v1-v3)/(v1-v2)), " (%)"
}
