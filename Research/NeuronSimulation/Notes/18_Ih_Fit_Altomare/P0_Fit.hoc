//==============================================================================
// File Name: P0_Fit.hoc

//==============================================================================
// Load NEURON main menu
load_file("nrngui.hoc")

//==============================================================================
// Parameters for rate constants
alpha_0 = 0.01406
beta_0 = 743.6
gamma_0 = 2.289
delta_0 = 74.36

z_alpha = -0.9369
z_beta = 0.9369
z_gamma = -1.018
z_delta = 1.018

a = 0.2
f = 1 / a^0.5
r = 25.85

//==============================================================================
// A function to calculate rate constant based on Boltzmann function
// $1: a0 (rate constant at 0 mV); $2: z (charge); $3: v (voltage)
// r = R * T / F = 25.85 (mV)
func get_rate(){
	return $1 * exp($2 * $3 / r)
}

//==============================================================================
// A function to calculate K
func K_func(){ local v	// $1:voltage
	return get_rate(delta_0, z_delta, $1)/get_rate(gamma_0, z_gamma, $1)
}

//==============================================================================
// A function to calculate L
func L_func(){ local v	// $1:voltage
	return get_rate(beta_0, z_beta, $1)/get_rate(alpha_0, z_alpha, $1)
}

//==============================================================================
// A function to calculate P0
func P0_func(){ local v	// $1:voltage
	return 1/(1 + L_func($1)*((1 + 1 / K_func($1)) / \
		(1 + 1 / (a * K_func($1))))^4)
}


//==============================================================================
// Save P0 to "P0.dat"
objref ioFile

proc save_xy(){
	ioFile = new File()
	ioFile.wopen("P0.dat")
	ioFile.printf("x y\n")

	for(i = -150; i <= 50; i += 1){
		//ioFile.printf("%g %g\n", i, P0(i))
		ioFile.printf("%g %g\n", i, P0_func(i))
	}

	ioFile.close()
}

print "Save P0 to \"Po.dat\""
save_xy()

//==============================================================================
// Return the value of Boltzmann equation. $1: x; $2: x0; $3: k
func Boltzmann(){
	if($3 != 0){
		return 1/(1+exp(($1-$2)/$3))
	}
	
	return 0
}

//==============================================================================
// Find the best fit
double fitVar[4]

// Error function
func FittingError() {

	alpha_0 = $&2[0] / 100
	beta_0 = $&2[1] * 100
	gamma_0 = $&2[2]
	delta_0 = $&2[3] * 10
	
	error = 0

	for(i = -100; i <= 0; i += 1){
		error += (P0_func(i) - Boltzmann(i, -80.5, 6.7))^2
	}
	
	return error
}

// Fitting procedure
proc FindBestFit(){

	// Set fitting parameters
	fitVar[0] = alpha_0 * 100
	fitVar[1] = beta_0 / 100
	fitVar[2] = gamma_0
	fitVar[3] = delta_0 / 10
	
	// Set fitting environment
	// (tolerance, max step size, print mode)
	attr_praxis(1e-5, 1, 1)
	
	// Find the best fit
	error = fit_praxis(4, "FittingError", &fitVar[0])
	
	// Assign new values to parameters
	alpha_0 = fitVar[0] / 100
	beta_0 = fitVar[1] * 100
	gamma_0 = fitVar[2]
	delta_0 = fitVar[3] * 10
}

FindBestFit()

// Print results
print "Alpha0 = ", alpha_0
print "Beta0 = ", beta_0
print "Gamma0 = ", gamma_0
print "Delta0 = ", delta_0

//==============================================================================
